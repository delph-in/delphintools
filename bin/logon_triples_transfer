#!/bin/bash

# transfer a profile and store intermediate mrs in <transfer>
# assumes <source> exists with mrs parse results
logon_partial_transfer () {
	source=$1
	partial=$2
#	logon_setup_profile smrs
#	cp -f $DTHOME/makefiles/Makefile.pmrs $TREEBANK/$partial/Makefile
	
	cat 2>&1 <<- PARTIAL
		(setf tsdb::*tsdb-transfer-include-fragments-p* t)
		(lkb::read-script-file-aux "$transferscript")
<<<<<<< local
                (setf tsdb::*tsdb-semantix-hook* "lkb::get-dict-triple")
=======
		(defun mrs::get-mrs-string (edge) 
			(format nil "~A"
				(mrs::ed-convert-psoa (mrs::extract-mrs edge))))
		(tsdb::tsdb :home "$name")
		(tsdb::tsdb :list)
>>>>>>> other
	PARTIAL
	
	if [ -n "$edges" ]; then
		if [ $edges -gt 0 ]; then
			cat 2>&1 <<- PARTIAL
				(setf mt::*transfer-edge-limit* $edges)
			PARTIAL
		fi
	fi
	
	if [ -n "$limit" ]; then
		n=0
		while [ $n -lt $limit ]; do
#			logon_setup_profile tmrs/$n
#			cp -f $DTHOME/makefiles/Makefile.profile $TREEBANK/$partial/$n/Makefile
			cat 2>&1 <<- PARTIAL
				(tsdb::tsdb-do-process "tmrs/$n"
									   :condition "result-id=$n"
									   :type
									   :transfer
									   :overwrite t
									   :gold "smrs")
			PARTIAL
			n=`expr $n + 1`
		done
	fi
}

logon_partial_transfer $*
